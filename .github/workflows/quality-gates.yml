name: Quality Gates

on:
  pull_request:
    branches: [master, main]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, dom, fileinfo, mysql, zip, bcmath, gd

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Check code formatting with Laravel Pint
        run: vendor/bin/pint --test

      - name: Run static analysis with PHPStan (if available)
        run: |
          if [ -f "phpstan.neon" ] || [ -f "phpstan.neon.dist" ]; then
            composer require --dev nunomaduro/larastan
            vendor/bin/phpstan analyse --memory-limit=2G
          else
            echo "PHPStan configuration not found, skipping static analysis"
          fi

      - name: Check for security vulnerabilities
        run: composer audit

  test-coverage:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: sampahgo_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, dom, fileinfo, mysql, zip, bcmath, gd
          coverage: xdebug

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run tests with coverage
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: |
          php artisan migrate --force
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Check test coverage threshold
        run: |
          # Extract coverage percentage from coverage.xml
          coverage=$(php -r "
            \$xml = simplexml_load_file('coverage.xml');
            \$metrics = \$xml->project->metrics;
            \$covered = (float)\$metrics['coveredstatements'];
            \$total = (float)\$metrics['statements'];
            \$percentage = (\$covered / \$total) * 100;
            echo round(\$percentage, 2);
          ")
          echo "Code coverage: ${coverage}%"

          # Set minimum coverage threshold (adjust as needed)
          min_coverage=70

          if (( $(echo "$coverage < $min_coverage" | bc -l) )); then
            echo "Code coverage ${coverage}% is below minimum threshold ${min_coverage}%"
            exit 1
          else
            echo "Code coverage ${coverage}% meets minimum threshold ${min_coverage}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
